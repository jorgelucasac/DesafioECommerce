// <auto-generated />
using System;
using Desafio.ECommerce.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Desafio.ECommerce.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20211006215454_Inicial")]
    partial class Inicial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.HasSequence<int>("SequenciaPedidos", "sequencias")
                .StartsAt(100L)
                .HasMin(100L);

            modelBuilder.Entity("Desafio.ECommerce.Business.Models.Endereco", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasColumnType("varchar(8)");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Complemento")
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("varchar(2)");

                    b.Property<bool>("Excluido")
                        .HasColumnType("bit");

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<Guid>("PedidoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PedidoId")
                        .IsUnique();

                    b.ToTable("Endereco");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4b158ff8-392c-49f6-878c-9b584f3e1453"),
                            Ativo = true,
                            Bairro = "Bairro 5",
                            Cep = "00000000",
                            Cidade = "Cidade 5",
                            Estado = "TO",
                            Excluido = false,
                            Logradouro = "Rua 5",
                            Numero = "1240",
                            PedidoId = new Guid("2f55aecb-0d49-4a4c-aa60-109046cfe383")
                        },
                        new
                        {
                            Id = new Guid("23f8068d-2de2-41d1-9947-dd99566c4dba"),
                            Ativo = true,
                            Bairro = "Bairro 10",
                            Cep = "00000000",
                            Cidade = "Cidade 10",
                            Estado = "TO",
                            Excluido = false,
                            Logradouro = "Rua 10",
                            Numero = "1089",
                            PedidoId = new Guid("c21193c0-8b1b-4d0b-930c-f54d43becc0b")
                        },
                        new
                        {
                            Id = new Guid("e66f392f-80f9-4f15-affd-38daa6bf8126"),
                            Ativo = true,
                            Bairro = "Bairro 15",
                            Cep = "00000000",
                            Cidade = "Cidade 15",
                            Estado = "TO",
                            Excluido = false,
                            Logradouro = "Rua 15",
                            Numero = "1790",
                            PedidoId = new Guid("e02f6cf2-b407-447f-9fb7-1333d026eb44")
                        });
                });

            modelBuilder.Entity("Desafio.ECommerce.Business.Models.Equipe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("Excluido")
                        .HasColumnType("bit");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PlacaVeiculo")
                        .IsRequired()
                        .HasColumnType("varchar(7)");

                    b.HasKey("Id");

                    b.ToTable("Equipe");

                    b.HasData(
                        new
                        {
                            Id = new Guid("270c2575-d6f0-4c7f-909c-0ec04eff0e19"),
                            Ativo = true,
                            Descricao = "Equipe de pedidos 1",
                            Excluido = false,
                            Nome = "Equipe 1",
                            PlacaVeiculo = "KZC9055"
                        },
                        new
                        {
                            Id = new Guid("ca555f2f-7aa5-43c2-a18d-bbe01fc7a0c8"),
                            Ativo = true,
                            Descricao = "Equipe de pedidos 2",
                            Excluido = false,
                            Nome = "Equipe 2",
                            PlacaVeiculo = "LWI5199"
                        });
                });

            modelBuilder.Entity("Desafio.ECommerce.Business.Models.Pedido", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DataEntrega")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EquipeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Excluido")
                        .HasColumnType("bit");

                    b.Property<int>("NumeroIdentificacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR sequencias.SequenciaPedidos");

                    b.HasKey("Id");

                    b.HasIndex("EquipeId");

                    b.ToTable("Pedido");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2f55aecb-0d49-4a4c-aa60-109046cfe383"),
                            Ativo = true,
                            DataEntrega = new DateTime(2021, 9, 21, 18, 54, 53, 980, DateTimeKind.Local).AddTicks(8191),
                            EquipeId = new Guid("270c2575-d6f0-4c7f-909c-0ec04eff0e19"),
                            Excluido = false,
                            NumeroIdentificacao = 98
                        },
                        new
                        {
                            Id = new Guid("c21193c0-8b1b-4d0b-930c-f54d43becc0b"),
                            Ativo = true,
                            DataEntrega = new DateTime(2021, 9, 26, 18, 54, 53, 980, DateTimeKind.Local).AddTicks(9953),
                            EquipeId = new Guid("270c2575-d6f0-4c7f-909c-0ec04eff0e19"),
                            Excluido = false,
                            NumeroIdentificacao = 99
                        },
                        new
                        {
                            Id = new Guid("e02f6cf2-b407-447f-9fb7-1333d026eb44"),
                            Ativo = true,
                            EquipeId = new Guid("ca555f2f-7aa5-43c2-a18d-bbe01fc7a0c8"),
                            Excluido = false,
                            NumeroIdentificacao = 100
                        });
                });

            modelBuilder.Entity("Desafio.ECommerce.Business.Models.Produto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("Excluido")
                        .HasColumnType("bit");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<Guid>("PedidoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Valor")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("PedidoId");

                    b.ToTable("Produto");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7dbf5673-3064-4d48-949c-019edeef0d98"),
                            Ativo = true,
                            Descricao = "Descricão Produto 0",
                            Excluido = false,
                            Nome = "Nome Produto 0",
                            PedidoId = new Guid("2f55aecb-0d49-4a4c-aa60-109046cfe383"),
                            Valor = 84m
                        },
                        new
                        {
                            Id = new Guid("c2870a3c-ed2e-4b9a-889e-e634caf5b9be"),
                            Ativo = true,
                            Descricao = "Descricão Produto 1",
                            Excluido = false,
                            Nome = "Nome Produto 1",
                            PedidoId = new Guid("2f55aecb-0d49-4a4c-aa60-109046cfe383"),
                            Valor = 56m
                        },
                        new
                        {
                            Id = new Guid("c42c4d2a-971a-4608-9bbc-bc1f34208426"),
                            Ativo = true,
                            Descricao = "Descricão Produto 2",
                            Excluido = false,
                            Nome = "Nome Produto 2",
                            PedidoId = new Guid("2f55aecb-0d49-4a4c-aa60-109046cfe383"),
                            Valor = 52m
                        },
                        new
                        {
                            Id = new Guid("328e3296-d624-42ca-96f2-c1d453200720"),
                            Ativo = true,
                            Descricao = "Descricão Produto 3",
                            Excluido = false,
                            Nome = "Nome Produto 3",
                            PedidoId = new Guid("2f55aecb-0d49-4a4c-aa60-109046cfe383"),
                            Valor = 86m
                        },
                        new
                        {
                            Id = new Guid("06c75078-8480-46c9-bd03-0011b2e10fe2"),
                            Ativo = true,
                            Descricao = "Descricão Produto 4",
                            Excluido = false,
                            Nome = "Nome Produto 4",
                            PedidoId = new Guid("2f55aecb-0d49-4a4c-aa60-109046cfe383"),
                            Valor = 53m
                        },
                        new
                        {
                            Id = new Guid("f7f0dc10-ebc1-4809-9e3b-ac6dbd55c94f"),
                            Ativo = true,
                            Descricao = "Descricão Produto 5",
                            Excluido = false,
                            Nome = "Nome Produto 5",
                            PedidoId = new Guid("c21193c0-8b1b-4d0b-930c-f54d43becc0b"),
                            Valor = 11m
                        },
                        new
                        {
                            Id = new Guid("87146e65-9cf5-45cd-beab-cf4fa3eab1aa"),
                            Ativo = true,
                            Descricao = "Descricão Produto 6",
                            Excluido = false,
                            Nome = "Nome Produto 6",
                            PedidoId = new Guid("c21193c0-8b1b-4d0b-930c-f54d43becc0b"),
                            Valor = 84m
                        },
                        new
                        {
                            Id = new Guid("043a66c1-1c35-4a76-bcdd-cecd2050d3fd"),
                            Ativo = true,
                            Descricao = "Descricão Produto 7",
                            Excluido = false,
                            Nome = "Nome Produto 7",
                            PedidoId = new Guid("c21193c0-8b1b-4d0b-930c-f54d43becc0b"),
                            Valor = 81m
                        },
                        new
                        {
                            Id = new Guid("905a384d-8bb2-427d-8ec2-5344cb928896"),
                            Ativo = true,
                            Descricao = "Descricão Produto 8",
                            Excluido = false,
                            Nome = "Nome Produto 8",
                            PedidoId = new Guid("c21193c0-8b1b-4d0b-930c-f54d43becc0b"),
                            Valor = 27m
                        },
                        new
                        {
                            Id = new Guid("b97fe92f-75a7-49fb-95ff-06efc5f16227"),
                            Ativo = true,
                            Descricao = "Descricão Produto 9",
                            Excluido = false,
                            Nome = "Nome Produto 9",
                            PedidoId = new Guid("c21193c0-8b1b-4d0b-930c-f54d43becc0b"),
                            Valor = 48m
                        },
                        new
                        {
                            Id = new Guid("e9cc2061-14bc-4aef-948c-1f44017fa4d6"),
                            Ativo = true,
                            Descricao = "Descricão Produto 10",
                            Excluido = false,
                            Nome = "Nome Produto 10",
                            PedidoId = new Guid("e02f6cf2-b407-447f-9fb7-1333d026eb44"),
                            Valor = 22m
                        },
                        new
                        {
                            Id = new Guid("f31ebbca-bfca-4ff4-854a-ecab7e3ed5b9"),
                            Ativo = true,
                            Descricao = "Descricão Produto 11",
                            Excluido = false,
                            Nome = "Nome Produto 11",
                            PedidoId = new Guid("e02f6cf2-b407-447f-9fb7-1333d026eb44"),
                            Valor = 26m
                        },
                        new
                        {
                            Id = new Guid("5596a2b5-6859-4b70-a27a-d361b63f8e2a"),
                            Ativo = true,
                            Descricao = "Descricão Produto 12",
                            Excluido = false,
                            Nome = "Nome Produto 12",
                            PedidoId = new Guid("e02f6cf2-b407-447f-9fb7-1333d026eb44"),
                            Valor = 44m
                        },
                        new
                        {
                            Id = new Guid("ac78565c-1bc5-4b7f-9fbe-89da14877159"),
                            Ativo = true,
                            Descricao = "Descricão Produto 13",
                            Excluido = false,
                            Nome = "Nome Produto 13",
                            PedidoId = new Guid("e02f6cf2-b407-447f-9fb7-1333d026eb44"),
                            Valor = 27m
                        },
                        new
                        {
                            Id = new Guid("48ef182d-b6ee-4159-9c19-6f51c5a39df2"),
                            Ativo = true,
                            Descricao = "Descricão Produto 14",
                            Excluido = false,
                            Nome = "Nome Produto 14",
                            PedidoId = new Guid("e02f6cf2-b407-447f-9fb7-1333d026eb44"),
                            Valor = 61m
                        });
                });

            modelBuilder.Entity("Desafio.ECommerce.Business.Models.Endereco", b =>
                {
                    b.HasOne("Desafio.ECommerce.Business.Models.Pedido", "Pedido")
                        .WithOne("Endereco")
                        .HasForeignKey("Desafio.ECommerce.Business.Models.Endereco", "PedidoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Pedido");
                });

            modelBuilder.Entity("Desafio.ECommerce.Business.Models.Pedido", b =>
                {
                    b.HasOne("Desafio.ECommerce.Business.Models.Equipe", "Equipe")
                        .WithMany("Pedidos")
                        .HasForeignKey("EquipeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Equipe");
                });

            modelBuilder.Entity("Desafio.ECommerce.Business.Models.Produto", b =>
                {
                    b.HasOne("Desafio.ECommerce.Business.Models.Pedido", "Pedido")
                        .WithMany("Produtos")
                        .HasForeignKey("PedidoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Pedido");
                });

            modelBuilder.Entity("Desafio.ECommerce.Business.Models.Equipe", b =>
                {
                    b.Navigation("Pedidos");
                });

            modelBuilder.Entity("Desafio.ECommerce.Business.Models.Pedido", b =>
                {
                    b.Navigation("Endereco");

                    b.Navigation("Produtos");
                });
#pragma warning restore 612, 618
        }
    }
}
